var searchIndex = {};
searchIndex['coalesce'] = {"items":[[0,"","coalesce","Coalesce allows you to unify disjoint types on the stack.",null,null],[4,"Coalesce0","","",null,null],[4,"Coalesce1","","",null,null],[13,"A","","",0,null],[4,"Coalesce2","","",null,null],[13,"A","","",1,null],[13,"B","","",1,null],[4,"Coalesce3","","",null,null],[13,"A","","",2,null],[13,"B","","",2,null],[13,"C","","",2,null],[4,"Coalesce4","","",null,null],[13,"A","","",3,null],[13,"B","","",3,null],[13,"C","","",3,null],[13,"D","","",3,null],[4,"Coalesce5","","",null,null],[13,"A","","",4,null],[13,"B","","",4,null],[13,"C","","",4,null],[13,"D","","",4,null],[13,"E","","",4,null],[4,"Coalesce6","","",null,null],[13,"A","","",5,null],[13,"B","","",5,null],[13,"C","","",5,null],[13,"D","","",5,null],[13,"E","","",5,null],[13,"F","","",5,null],[4,"Coalesce7","","",null,null],[13,"A","","",6,null],[13,"B","","",6,null],[13,"C","","",6,null],[13,"D","","",6,null],[13,"E","","",6,null],[13,"F","","",6,null],[13,"G","","",6,null],[4,"Coalesce8","","",null,null],[13,"A","","",7,null],[13,"B","","",7,null],[13,"C","","",7,null],[13,"D","","",7,null],[13,"E","","",7,null],[13,"F","","",7,null],[13,"G","","",7,null],[13,"H","","",7,null],[4,"Coalesce9","","",null,null],[13,"A","","",8,null],[13,"B","","",8,null],[13,"C","","",8,null],[13,"D","","",8,null],[13,"E","","",8,null],[13,"F","","",8,null],[13,"G","","",8,null],[13,"H","","",8,null],[13,"I","","",8,null],[14,"coalesce!","","Coalesces multiple values into one common (often borrowed) type.",null,null]],"paths":[[4,"Coalesce1"],[4,"Coalesce2"],[4,"Coalesce3"],[4,"Coalesce4"],[4,"Coalesce5"],[4,"Coalesce6"],[4,"Coalesce7"],[4,"Coalesce8"],[4,"Coalesce9"]]};
initSearch(searchIndex);
